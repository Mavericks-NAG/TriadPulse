name: Run Tests on Pull Request

on:
  pull_request:
    branches:
      - '*'

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Run tests and capture output
      - name: Run tests with Gradle
        id: gradle-test
        run: |
          ./gradlew test --info > test_output.txt 2>&1
          cat test_output.txt  # Display output in logs for debugging

      # Parse test results and create a table
      - name: Parse and format test results
        id: parse-results
        run: |
          # Extract test summary (adjust grep patterns based on your Gradle output)
          TOTAL=$(grep "Total tests" test_output.txt | awk '{print $3}' || echo "0")
          PASSED=$(grep "Tests passed" test_output.txt | awk '{print $3}' || echo "0")
          FAILED=$(grep "Tests failed" test_output.txt | awk '{print $3}' || echo "0")
          SKIPPED=$(grep "Tests skipped" test_output.txt | awk '{print $3}' || echo "0")

          # Default to 0 if not found
          TOTAL=${TOTAL:-0}
          PASSED=${PASSED:-0}
          FAILED=${FAILED:-0}
          SKIPPED=${SKIPPED:-0}

          # Create Markdown table
          TABLE="### Test Results\n\n| Metric       | Count |\n|--------------|-------|\n| Total Tests  | $TOTAL |\n| Passed       | $PASSED |\n| Failed       | $FAILED |\n| Skipped      | $SKIPPED |\n"

          # Escape newlines and store in an environment variable
          echo "TEST_TABLE<<EOF" >> $GITHUB_ENV
          echo "$TABLE" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # Post results as a PR comment
      - name: Comment on PR with test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const table = process.env.TEST_TABLE;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: table
            });

      # Upload test reports as artifacts (optional)
      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: build/reports/tests/test/